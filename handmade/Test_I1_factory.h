// This file will be generated by the IDL compiler in the future.
#ifndef IDL_TEST_I1_FACTORY_H_
#define IDL_TEST_I1_FACTORY_H_

#include "Test_I1.h"

namespace Test {

class I1_factory;
typedef CORBA::Internal::I_ptr <I1_factory> I1_factory_ptr;
typedef CORBA::Internal::I_var <I1_factory> I1_factory_var;

extern const ::Nirvana::ImportInterfaceT <::CORBA::TypeCode> _tc_I1_factory;

}

namespace CORBA {
namespace Nirvana {

NIRVANA_BRIDGE_BEGIN (::Test::I1_factory, "IDL:Test/I1_factory:1.0")
NIRVANA_BASE_ENTRY (CORBA::Object, CORBA_Object)
NIRVANA_BRIDGE_EPV
Interface* (*create)(Bridge < ::Test::I1_factory>*, Long, Interface*);
NIRVANA_BRIDGE_END ()

template <class T>
class Client <T, ::Test::I1_factory> :
	public T
{
public:
	::Test::I1_var create (Long addendum);
};

template <class T>
::Test::I1_var Client <T, ::Test::I1_factory>::create (Long addendum)
{
	Environment _env;
	Bridge < ::Test::I1_factory>& _b (T::_get_bridge (_env));
	I_ret < ::Test::I1> _ret = (_b._epv ().epv.create) (&_b, addendum, &_env);
	_env.check ();
	return _ret;
}

template <>
struct Type < ::Test::I1_factory> : TypeObject < ::Test::I1_factory>
{
	static TypeCode_ptr type_code ()
	{
		return ::Test::_tc_I1_factory;
	}
};

}
}

namespace Test {

class I1_factory : public CORBA::Internal::ClientInterface <I1_factory, ::CORBA::Object>
{};

}

#endif
